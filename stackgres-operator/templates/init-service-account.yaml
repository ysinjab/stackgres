apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-init
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-100"
---
{{- if .Values.initClusterRole }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-init
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-100"
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-init
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: '{{ .Values.initClusterRole }}'
  apiGroup: rbac.authorization.k8s.io
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-bootstrap"
  namespace: {{ .Release.Namespace }}
  labels:
    app: stackgres-operator
    scope: init
    job: bootstrap
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weigth": "-100"
spec:
  template:
    metadata:
      labels:
        app: stackgres-operator
        scope: init
        job: bootstrap
    spec:
      serviceAccountName: {{ .Release.Name }}-init
      containers:
      - name: "{{ .Release.Name }}-bootstrap"
        image: "ongres/kubectl:v1.19.14-build-6.6"
        imagePullPolicy: "IfNotPresent"
        command:
          - "/bin/bash"
          - "-ecx"
          - |
            {{- if .Release.IsUpgrade }}
            kubectl scale --timeout 1h --replicas 0 -n '{{ .Release.Namespace }}' 'deployment/{{ .Release.Name }}'
            {{- else }}
            true
            {{- end }}
      restartPolicy: OnFailure
